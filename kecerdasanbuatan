Orang yang pertama kali menulis program Hello World adalah Brian Kernighan1. Ketika itu, beliau menulis dokumentasi untuk bahasa pemrograman BCPL (Basic Combined Programming Language) dan memberikan contoh program Hello World. 
main(){
  extrn a,b,c;
  putchar(a); putchar(b); putchar(c); putchar('!*n');
}

a 'hell';
b 'o, w';
c 'orld';
Program tersebut akan menghasilkan output hello, world.
Setelah bahasa pemrograman C dirilis, bahasa pemrograman BCPL selanjutnya dikenal dengan bahasa B.
Kadang bahasa BCPL dibuat menjadi bahan lelucon dengan merubah kepanjangan BCPL menjadi “Before C Programming Language” (Bahasa Pemrograman Sebelum C).
Brian Kernighan juga menulis dokumentasi untuk bahasa pemrograman C dan diterbitkan dengan judul “Programming in C: A Tutorial”. Dalam dokumentasi tersebut, beliau menuliskan contoh program Hello World Juga.
main() {
    printf("hello, world");
}
Menggunakan fungsi dasar print()
Contoh
 
1
Cetak ( "halo ngodingdata" )
Bisa juga disimpan di variabel
 
1
2
halo  =  "halo ngodingdata"
cetak ( halo )
ketika ingin mencetak string dan variabel dalam satu statement dapat menggunakan penguhubung +
 
1
2
nama  =  "faqih"
print ( "halo,selamat pagi" + nama )
Mencetak output dengan metode format
Ada teknik lain untuk mencetak hasil program dengan metode format. Dengan teknik ini memudahkan dalam mencetak yang terdiri dari beberapa variabel
Nilai variabel di fungsi print() ditulis {} sehingga dapat dipisahkan antara string dan variabel
Contohnya begini
 
1
2
3
nama  =  "faqih"
mencetak ( "selamat pagi {}" . Format ( nāma ))
Teknik ini lebih memudahkan programmer dalam membuat pernyataan dalam satu baris dibandingkan dengan metode yang pertama memisahkan string dan variabel dengan simbol +
Misalnya begini.. Di dalam suatu kelas terdapat 4 anak yang memiliki nilai matakuliah yang berbeda-beda
 
1
2
3
4
toni  =  100
rani  =  87
jaka  =  90
dia  =  69
Kalau ingin dicetak dengan metode pertama di python adalah sebagai berikut
 
1
2
print ( "nilai toni = " + str ( toni ) +  " dan nilai rani = "  + str ( rani ) + \
    " dan nilai jaka = "  + str ( jaka ) +  " dan nilai diah = " + str ( diah ))
Sedangkan kalau dicetak dengan metode format adalah seperti ini
 
1
2
print ( "nilai toni = {} dan nilai rani = {} dan nilai jaka = {} dan nilai diah = {}" \
    . format ( toni , rani , jaka , diah ))
Kedua kode di atas sama-sama menghasilkan output
$ python cetak.py 

nilai toni = 100 dan nilai rani = 87 dan nilai jaka = 90 dan nilai diah = 69
Mana yang anda pilih?
Ada teknik lain untuk memanipulasi agar saat mencetak pernyataan dalam satu baris tapi di kode python tetap memanggil fungsi print() beberapa kali
Tekniknya adalah dengan men-disable newline karena default fungsi print() di akhir statement adalah newline
Caranya adalah dengan mengkosongkan string di akhir pernyataan dengan kata kunci end
 
1
2
3
4
print ( "nilai toni = " + str ( toni ) , end = '' )
print ( " dan nilai rani = " + str ( rani ) , end = '' )
print ( " dan nilai jaka = " + str ( jaka ) , end = '' )
print ( " dan nilai diah = " + str ( diah ))
Mencetak hasil dengan f-string
Metode f-string diperkenalkan di python 3.6
Caranya adalah menambah karakter “f” di awal fungsi print()
Teknik ini memperbaiki metode format agar lebih mudah dan efisien digunakan
Contoh mencetak dengan metode format
 
1
2
3
nama  =  "faqih"
mencetak ( "selamat pagi {}" . Format ( nāma ))
Contoh case yang sama dicetak dengan f-string
 
1
print ( f "selamat pagi {nama}" )
Jadi variabel akan ditulis beriringan dengan string di dalam {} tanpa harus memisah antara string dan variabel dengan simbol – simbol yang rumit
Berdasarkan huruf di atas, kode print() untuk mencetak output di layar dapat ditulis sebagai berikut untuk menghasilkan output yang sama
 
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
# inisialisasi variabel
toni  =  100
rani  =  87
jaka  =  90
dia  =  69
# cetak dengan penghubung +
print ( "nilai toni = " + str ( toni ) +  " dan nilai rani = "  + str ( rani ) + \
    " dan nilai jaka = "  + str ( jaka ) +  " dan nilai diah = " + str ( diah ))
#cetak dengan metode format
print ( "nilai toni = {} dan nilai rani = {} dan nilai jaka = {} dan nilai diah = {}" \
    . format ( toni , rani , jaka , diah ))
# cetak dengan penghubung end=''
print ( "nilai toni = " + str ( toni ) , end = '' )
print ( " dan nilai rani = " + str ( rani ) , end = '' )
print ( " dan nilai jaka = " + str ( jaka ) , end = '' )
print ( " dan nilai diah = " + str ( diah ))
# cetak dengan f-string
print ( f "nilai toni = {toni} dan nilai rani = {rani} dan nilai jaka = {jaka} dan nilai diah = {diah}" )
Ketika di run hasilnya adalah
$ python cetak.py 
 nilai toni = 100 dan nilai rani = 87 dan nilai jaka = 90 dan nilai diah = 69
 nilai toni = 100 dan nilai rani = 87 dan nilai jaka = 90 dan nilai diah = 69
 nilai toni = 100 dan nilai rani = 87 dan nilai jaka = 90 dan nilai diah = 69
 nilai toni = 100 dan nilai rani = 87 dan nilai jaka = 90 dan nilai diah = 69
Hello world (Halo dunia) umumnya adalah program komputer yang mengeluarkan atau menampilkan pesan "Hello, World!". Program semacam itu sangat sederhana di sebagian besar bahasa pemrograman, dan sering digunakan untuk menggambarkan sintaks dasar bahasa pemrograman. Ini seringkali merupakan program pertama yang ditulis oleh orang-orang yang belajar kode.[1][2] Ini juga dapat digunakan sebagai tes kewarasan untuk memastikan bahwa bahasa komputer diinstal dengan benar, dan bahwa operator memahami cara menggunakannya
